# here we will compare the times generated by python functions
# we will use files that are converted from the first ping of the deployment,
# to avoid any confusion

# File #1
ncFile = r"E:\data\Sandwich\10811_V20784\python\10811whV.cdf"
time_of_first_deployment_ping = "2016/12/15 23:59:22 UTC"

# File #2
# ncFile = r"Y:\projects\python\ADCPy\data\demo1\py9991whCFtime.cdf"
# time_of_first_deployment_ping = "2004/5/19 02:42:30 UTC"

import xarray as xr
# this module is part of ADCPy on pypi.org
import EPICstuff.EPICmisc as ep
# stglib is available to be cloned from here https://github.com/dnowacki-usgs/stglib.git
import stglib

print("working with file {}".format(ncFile))
print("the time of the first deployment ping is {}".format(time_of_first_deployment_ping))
print("We will compare the times of the first ping in the file (first time stamp) using various methods")
print("\n")

print("opening the file as an xarray dataset with decode_times=False and drop_variables=None".format(ncFile))
ds = xr.open_dataset(ncFile, decode_times=False, drop_variables=None)
print("CF time information in the file is {} {}".format(ds["time"][0].values, ds["time"].units))
if 'EPIC_time' in ds.keys():
    print("EPIC time information in the file is {} {}".format(ds["EPIC_time"][0].values, ds["EPIC_time2"][0].values))
    print("time conversion results using methods in ADCPy\'s EPICstuff")
    tg, tdt = ep.EPICtime2datetime(ds["EPIC_time"][0:1].values, ds["EPIC_time2"][0:1].values)
    print("EPIC time and time2 converted to datetime results in {}".format(tdt))
    print("EPIC time and time2 converted to gregorian results in {}".format(tg))
    print("time conversion results using stglib methods")
    ts = stglib.core.utils.epic_to_datetime(ds['EPIC_time'][0].values, ds['EPIC_time2'][0].values)
    print("EPIC time and time2 converted to pandas time stamp results in {}".format(ts))

ds.close()
print("\n")

print("opening the file as an xarray dataset with " +
      "decode_times=True, use_cftime=True and drop_variables=\'EPIC_time\', \'EPIC_time2\'".format(ncFile))
vars2omit = {'EPIC_time', 'EPIC_time2'}
ds = xr.open_dataset(ncFile, decode_times=True, use_cftime=True, drop_variables=vars2omit)
print("the first time stamp in the file as a value is {}".format(ds['time'][0].values))
print("the first time stamp in the file is {}".format(ds['time'][0]))
ds.close()
print("\n")

